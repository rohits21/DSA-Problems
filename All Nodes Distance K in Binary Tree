class Solution {

    void parentMarking(TreeNode *root, map<TreeNode*,TreeNode*> &mp){
        
        queue<TreeNode*> q;
        q.push(root);
      
        
        while(!q.empty()){
            
                
                TreeNode* curr = q.front();
                q.pop();
                
                if(curr->left){
                    mp[curr->left] = curr;
                    q.push(curr->left);
                }
                if(curr->right){
                    mp[curr->right] = curr;
                    q.push(curr->right);
                }
                
        }
    }
    
   
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        
        map<TreeNode*, TreeNode*> mp;
        mp[root] = NULL;
        vector<int> ans;
        
        parentMarking(root,mp);
        
        queue<TreeNode *> q;
        map<TreeNode * , bool> visited;
        
        q.push(target);
        visited[target] = true;
        
        int dist = 0;
        
        while(!q.empty()){
            
            int size = q.size();
            if(dist++ == k) break;
            
            while(size){
                TreeNode *node = q.front();
                q.pop();
                
                if(mp[node] and !visited[mp[node]]){
                    visited[mp[node]] = true;
                    q.push(mp[node]);
                }
                
                if(node->left and !visited[node->left]){
                    visited[node->left] = true;
                    q.push(node->left);
                }
                
                if(node->right and !visited[node->right]){
                    visited[node->right] = true;
                    q.push(node->right);
                }
                
                size--;
            }
        }
        
        while(!q.empty()){
            
            ans.push_back(q.front()->val);
            q.pop();
        }
        
        
        
        
        return ans;
    }
};
